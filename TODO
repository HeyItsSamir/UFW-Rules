TODO
----
separate out backend and frontend code and put into /usr/share

Backend cleanup and configure in /etc/defaults/ufw

make rules file configurable in /etc/defaults/ufw (eg IPT_RULES)

implement /etc/ufw/maps


Prettier status output


Provide a way out if it doesn't work (eg prompt user for 'Did it work?' type
question, and timeout if no response (maybe use the previous working policy?))


Improve grub/menu.lst type of configuration.  Goals:
1. need a config file for the user to edit (don't get in admin's way)
2. don't (excessively) edit rules file
3. don't flush on adding/removing rules
4. state is maintained for boot/power loss

How to do this:
1. all 'default' options that are in /etc/ufw/ufw.rules move out into ufw-*
chains
2. ufw.rules goes away
3. initscript will be more intelligent, and setup the default policy, the
default chains (INPUT, OUTPUT, FORWARD), and hooks into the ufw chains (if
/etc/defaults/ufw is ENABLED)
4. everytime do an 'allow|deny' with ufw, we update an iptables-save file
in /var
5. enable will toggle ENABLED and use iptables to add the hooks to INPUT,
whereas disable does the opposite

'1' is achieved by the admin just modifying the initscript
'2' is satisfied because don't edit any rules
'3' we don't have to flush anything as we are just adding/removing the chain
    hook
'4' state is preserved, and not in a conffile


Revamp the allow|deny acl syntax. Current implementation for a few rules:
# ufw allow 25
# ufw allow from 192.168.0.1 to 25:tcp
# ufw allow from 192.168.0.0/24 to 192.168.0.2 25:tcp

Pros: natural language syntax
Cons: non-standard, parser from scratch (but implemented)


Possible alternatives are:

pcap syntax, eg:
# ufw allow port 25
# ufw allow src 192.168.0.1 and dst port 25 and tcp
# ufw allow src net 192.168.0.0/24 and dst port 25 and tcp

Pros: standard syntax, parser (should be) available
Cons: more to type, easy to mistake 'dst 25' (the 25.0.0.0 network) for 'dst
port 25'


pf-style syntax:
# ufw allow from any to any port 25
# ufw allow proto tcp from 192.168.0.1 to any port 25
# ufw allow proto tcp from 192.168.0.0/24 to any port 25

Pros: natural language syntax, known syntax
Cons: more to type, parser from scratch


PIX-style syntax:
# ufw allow ip any any eq 25
# ufw allow tcp host 192.168.0.1 any eq 25
# ufw allow tcp 192.168.0.0 255.255.255.0 any eq 25

Pros: known syntax
Cons: more to type, harder to learn, parser available?)



(C) 2008 Canonical Ltd.
